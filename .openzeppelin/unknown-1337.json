{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xDF9a580D219C4F04acDE09A25B77A76fA9f85F3c",
    "txHash": "0xb782b151cacea143026b070d9bb1ccd77189cce8c69f33e12323291711aae93c"
  },
  "proxies": [
    {
      "address": "0xC267410F7FE63099b8f7C96E29418a882BE9289e",
      "txHash": "0x988263aee9dba43059613b35cd74e740199097b270b715a58ce015e9d890b7c6",
      "kind": "transparent"
    },
    {
      "address": "0x6D2868C39007c20bC2Ad8E8ED17679293cF677d2",
      "txHash": "0x7864c261bf20519656a96f53a04c240a41488aa1ef9443e2a6a6bb49a9b82bd0",
      "kind": "transparent"
    },
    {
      "address": "0x07d2A9c008F70Ef3C9eA7D8893e16902932a076f",
      "txHash": "0xc81686861b773e223e755ec667072b8e9ebd558435122752918a99a21656ed80",
      "kind": "transparent"
    },
    {
      "address": "0xAeDc030beCd9C45eb507391dF78559DD2524a06B",
      "txHash": "0xaec0d637f0728cacfecbe5df2289b5908409339b6ee00cfb1bb2b9253d47469a",
      "kind": "transparent"
    },
    {
      "address": "0xaC21cBca1C84c9950E34B33c7acEDEa1C61F3ae9",
      "txHash": "0x1b651cdc853f6f09993110b3965250006844e30ab501feef84072e93529915f0",
      "kind": "transparent"
    },
    {
      "address": "0xd94116A36B7Cd208C97266C119044CD79A376125",
      "txHash": "0x3eb1cc322393b769b86fe07c68d3b63c8f42249a06b5a52ccf897c4349e5d869",
      "kind": "transparent"
    },
    {
      "address": "0xaE15219DC17E5751c754a1f4d0feea64B74D8FF7",
      "txHash": "0xdb18d54ea00d952cdc10b3d27eacd4e777196a31e32cab135580637528565ee2",
      "kind": "transparent"
    },
    {
      "address": "0x0309A1F2c6D3bac0e1280eEC4369245C96bdc81f",
      "txHash": "0xe9df00c467944c9c4ec9f884e7df081160abafe722409a4114cba866ec9ca54a",
      "kind": "transparent"
    },
    {
      "address": "0x667F0120143aC165E5ECdF6C3bBd845B24e29f11",
      "txHash": "0x6265c4f42eb0829885d0a275b009f1271364d87cf46ba3929993091aa53e630a",
      "kind": "transparent"
    },
    {
      "address": "0xF2c05B1Ab3d155a16c8C7B63770DC8C86626C1Ef",
      "txHash": "0x5a0d0da3a9131f78b28825808631b25c9ed1a1dcfd6ecf8d54e098cf46a72423",
      "kind": "transparent"
    },
    {
      "address": "0x37aD89FdF4313e1e6c63434211d6153983E1F6e3",
      "txHash": "0x1ec5e697b3bdeb3029081fe6edd850338a3e4426271fcaa412f8a01a574094b1",
      "kind": "transparent"
    },
    {
      "address": "0xB80Aa980EF5D6411E0954108d8CfaA8e0F73701b",
      "txHash": "0x80b40c806fef92b5d6e63badb8d4e17026390f1956e70a941398a38ca703bc1b",
      "kind": "transparent"
    },
    {
      "address": "0x23349222A1E5E41FfD4D5557f0724F110DaBd915",
      "txHash": "0x46f79f0cbaa71bc38fea05ccc33b5caa828de5ec6cecc31b31ff04f3d2fd7eda",
      "kind": "transparent"
    },
    {
      "address": "0xCABBd1a6B50a6F61C4F996F0017Ab519Cc61De7A",
      "txHash": "0x435af62a12f9987f1027beb580287e7347565daa5c642bbbd29365a5c18e9ec6",
      "kind": "transparent"
    }
  ],
  "impls": {
    "a317b6ccbd3cd6d15aae4a183d00040fbd56837b613d15f27a2c989e1332b096": {
      "address": "0xF2c05B1Ab3d155a16c8C7B63770DC8C86626C1Ef",
      "txHash": "0xa495036162098f99672cb9f5d1358eb277fe19664128f564723dd70582d5108b",
      "layout": {
        "solcVersion": "0.8.16",
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:116"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "StakingPool",
            "label": "rewardDistributor",
            "type": "t_address",
            "src": "..\\project:\\contracts\\StakingPool.sol:31"
          },
          {
            "contract": "StakingPool",
            "label": "coldWalletAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\StakingPool.sol:34"
          },
          {
            "contract": "StakingPool",
            "label": "poolInfo",
            "type": "t_array(t_struct(StakingPoolInfo)14902_storage)dyn_storage",
            "src": "..\\project:\\contracts\\StakingPool.sol:37"
          },
          {
            "contract": "StakingPool",
            "label": "userStakingData",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(StakingData)14939_storage))",
            "src": "..\\project:\\contracts\\StakingPool.sol:40"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_array(t_struct(StakingPoolInfo)14902_storage)dyn_storage": {
            "label": "struct StakingPool.StakingPoolInfo[]"
          },
          "t_struct(StakingPoolInfo)14902_storage": {
            "label": "struct StakingPool.StakingPoolInfo",
            "members": [
              {
                "label": "acceptedToken",
                "type": "t_contract(IERC20Upgradeable)987"
              },
              {
                "label": "cap",
                "type": "t_uint256"
              },
              {
                "label": "totalStaked",
                "type": "t_uint256"
              },
              {
                "label": "APR",
                "type": "t_uint256"
              },
              {
                "label": "lockDuration",
                "type": "t_uint256"
              },
              {
                "label": "delayDuration",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)987": {
            "label": "contract IERC20Upgradeable"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(StakingData)14939_storage))": {
            "label": "mapping(uint256 => mapping(address => struct StakingPool.StakingData))"
          },
          "t_mapping(t_address,t_struct(StakingData)14939_storage)": {
            "label": "mapping(address => struct StakingPool.StakingData)"
          },
          "t_struct(StakingData)14939_storage": {
            "label": "struct StakingPool.StakingData",
            "members": [
              {
                "label": "balance",
                "type": "t_uint256"
              },
              {
                "label": "stakingDataRecordCount",
                "type": "t_uint256"
              },
              {
                "label": "stakingDatas",
                "type": "t_mapping(t_uint256,t_struct(UserStakingData)14913_storage)"
              },
              {
                "label": "totalWithdrawals",
                "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(UserPendingWithdrawl)14918_storage))"
              },
              {
                "label": "totalWithdrawalsCount",
                "type": "t_mapping(t_uint256,t_uint256)"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(UserStakingData)14913_storage)": {
            "label": "mapping(uint256 => struct StakingPool.UserStakingData)"
          },
          "t_struct(UserStakingData)14913_storage": {
            "label": "struct StakingPool.UserStakingData",
            "members": [
              {
                "label": "balance",
                "type": "t_uint256"
              },
              {
                "label": "stakeTime",
                "type": "t_uint256"
              },
              {
                "label": "lastClaimTime",
                "type": "t_uint256"
              },
              {
                "label": "pendingReward",
                "type": "t_uint256"
              },
              {
                "label": "APR",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(UserPendingWithdrawl)14918_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct StakingPool.UserPendingWithdrawl))"
          },
          "t_mapping(t_uint256,t_struct(UserPendingWithdrawl)14918_storage)": {
            "label": "mapping(uint256 => struct StakingPool.UserPendingWithdrawl)"
          },
          "t_struct(UserPendingWithdrawl)14918_storage": {
            "label": "struct StakingPool.UserPendingWithdrawl",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "applicableAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "d1e53814bbfa90f8ed66c77722f23d60fc3c046b185b53a7bc31bd69f5d805bc": {
      "address": "0xB80Aa980EF5D6411E0954108d8CfaA8e0F73701b",
      "txHash": "0x60a3905d830303d28f16f7bb2bb159a98658c10babfa8f68c8f8e67026b74d05",
      "layout": {
        "solcVersion": "0.8.16",
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:116"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "StakingPool",
            "label": "rewardDistributor",
            "type": "t_address",
            "src": "..\\project:\\contracts\\StakingPool.sol:31"
          },
          {
            "contract": "StakingPool",
            "label": "coldWalletAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\StakingPool.sol:34"
          },
          {
            "contract": "StakingPool",
            "label": "poolInfo",
            "type": "t_array(t_struct(StakingPoolInfo)14902_storage)dyn_storage",
            "src": "..\\project:\\contracts\\StakingPool.sol:37"
          },
          {
            "contract": "StakingPool",
            "label": "userStakingData",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(StakingData)14939_storage))",
            "src": "..\\project:\\contracts\\StakingPool.sol:40"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_array(t_struct(StakingPoolInfo)14902_storage)dyn_storage": {
            "label": "struct StakingPool.StakingPoolInfo[]"
          },
          "t_struct(StakingPoolInfo)14902_storage": {
            "label": "struct StakingPool.StakingPoolInfo",
            "members": [
              {
                "label": "acceptedToken",
                "type": "t_contract(IERC20Upgradeable)987"
              },
              {
                "label": "cap",
                "type": "t_uint256"
              },
              {
                "label": "totalStaked",
                "type": "t_uint256"
              },
              {
                "label": "APR",
                "type": "t_uint256"
              },
              {
                "label": "lockDuration",
                "type": "t_uint256"
              },
              {
                "label": "delayDuration",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)987": {
            "label": "contract IERC20Upgradeable"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(StakingData)14939_storage))": {
            "label": "mapping(uint256 => mapping(address => struct StakingPool.StakingData))"
          },
          "t_mapping(t_address,t_struct(StakingData)14939_storage)": {
            "label": "mapping(address => struct StakingPool.StakingData)"
          },
          "t_struct(StakingData)14939_storage": {
            "label": "struct StakingPool.StakingData",
            "members": [
              {
                "label": "balance",
                "type": "t_uint256"
              },
              {
                "label": "stakingDataRecordCount",
                "type": "t_uint256"
              },
              {
                "label": "stakingDatas",
                "type": "t_mapping(t_uint256,t_struct(UserStakingData)14913_storage)"
              },
              {
                "label": "totalWithdrawals",
                "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(UserPendingWithdrawl)14918_storage))"
              },
              {
                "label": "totalWithdrawalsCount",
                "type": "t_mapping(t_uint256,t_uint256)"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(UserStakingData)14913_storage)": {
            "label": "mapping(uint256 => struct StakingPool.UserStakingData)"
          },
          "t_struct(UserStakingData)14913_storage": {
            "label": "struct StakingPool.UserStakingData",
            "members": [
              {
                "label": "balance",
                "type": "t_uint256"
              },
              {
                "label": "stakeTime",
                "type": "t_uint256"
              },
              {
                "label": "lastClaimTime",
                "type": "t_uint256"
              },
              {
                "label": "pendingReward",
                "type": "t_uint256"
              },
              {
                "label": "APR",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(UserPendingWithdrawl)14918_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct StakingPool.UserPendingWithdrawl))"
          },
          "t_mapping(t_uint256,t_struct(UserPendingWithdrawl)14918_storage)": {
            "label": "mapping(uint256 => struct StakingPool.UserPendingWithdrawl)"
          },
          "t_struct(UserPendingWithdrawl)14918_storage": {
            "label": "struct StakingPool.UserPendingWithdrawl",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "applicableAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "58bfb3cc03c928f05d977a2169dd0bbb60e6082b61a8166b61885df667916310": {
      "address": "0x23349222A1E5E41FfD4D5557f0724F110DaBd915",
      "txHash": "0xbe1df969d5bf57991c18198e469ed8278929cba9088d4c2e52a3213a9c524b34",
      "layout": {
        "solcVersion": "0.8.16",
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:116"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "StakingPool",
            "label": "_value",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\StakingPool.sol:30"
          },
          {
            "contract": "StakingPool",
            "label": "rewardDistributor",
            "type": "t_address",
            "src": "..\\project:\\contracts\\StakingPool.sol:33"
          },
          {
            "contract": "StakingPool",
            "label": "coldWalletAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\StakingPool.sol:36"
          },
          {
            "contract": "StakingPool",
            "label": "poolInfo",
            "type": "t_array(t_struct(StakingPoolInfo)14904_storage)dyn_storage",
            "src": "..\\project:\\contracts\\StakingPool.sol:39"
          },
          {
            "contract": "StakingPool",
            "label": "userStakingData",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(StakingData)14941_storage))",
            "src": "..\\project:\\contracts\\StakingPool.sol:42"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_struct(StakingPoolInfo)14904_storage)dyn_storage": {
            "label": "struct StakingPool.StakingPoolInfo[]"
          },
          "t_struct(StakingPoolInfo)14904_storage": {
            "label": "struct StakingPool.StakingPoolInfo",
            "members": [
              {
                "label": "acceptedToken",
                "type": "t_contract(IERC20Upgradeable)987"
              },
              {
                "label": "cap",
                "type": "t_uint256"
              },
              {
                "label": "totalStaked",
                "type": "t_uint256"
              },
              {
                "label": "APR",
                "type": "t_uint256"
              },
              {
                "label": "lockDuration",
                "type": "t_uint256"
              },
              {
                "label": "delayDuration",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)987": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(StakingData)14941_storage))": {
            "label": "mapping(uint256 => mapping(address => struct StakingPool.StakingData))"
          },
          "t_mapping(t_address,t_struct(StakingData)14941_storage)": {
            "label": "mapping(address => struct StakingPool.StakingData)"
          },
          "t_struct(StakingData)14941_storage": {
            "label": "struct StakingPool.StakingData",
            "members": [
              {
                "label": "balance",
                "type": "t_uint256"
              },
              {
                "label": "stakingDataRecordCount",
                "type": "t_uint256"
              },
              {
                "label": "stakingDatas",
                "type": "t_mapping(t_uint256,t_struct(UserStakingData)14915_storage)"
              },
              {
                "label": "totalWithdrawals",
                "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(UserPendingWithdrawl)14920_storage))"
              },
              {
                "label": "totalWithdrawalsCount",
                "type": "t_mapping(t_uint256,t_uint256)"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(UserStakingData)14915_storage)": {
            "label": "mapping(uint256 => struct StakingPool.UserStakingData)"
          },
          "t_struct(UserStakingData)14915_storage": {
            "label": "struct StakingPool.UserStakingData",
            "members": [
              {
                "label": "balance",
                "type": "t_uint256"
              },
              {
                "label": "stakeTime",
                "type": "t_uint256"
              },
              {
                "label": "lastClaimTime",
                "type": "t_uint256"
              },
              {
                "label": "pendingReward",
                "type": "t_uint256"
              },
              {
                "label": "APR",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(UserPendingWithdrawl)14920_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct StakingPool.UserPendingWithdrawl))"
          },
          "t_mapping(t_uint256,t_struct(UserPendingWithdrawl)14920_storage)": {
            "label": "mapping(uint256 => struct StakingPool.UserPendingWithdrawl)"
          },
          "t_struct(UserPendingWithdrawl)14920_storage": {
            "label": "struct StakingPool.UserPendingWithdrawl",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "applicableAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "5e060765ea00e97cba3718a006dcf9221790e464497c5144633f3d606d336cea": {
      "address": "0xCABBd1a6B50a6F61C4F996F0017Ab519Cc61De7A",
      "txHash": "0x3c68f2ccd546995ebc7d24b188b0a47d59542149e5bcdbf33f02d3e2690bc1af",
      "layout": {
        "solcVersion": "0.8.16",
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:116"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "StakingPoolV2",
            "label": "_value",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\StakingPoolV2.sol:30"
          },
          {
            "contract": "StakingPoolV2",
            "label": "rewardDistributor",
            "type": "t_address",
            "src": "..\\project:\\contracts\\StakingPoolV2.sol:33"
          },
          {
            "contract": "StakingPoolV2",
            "label": "coldWalletAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\StakingPoolV2.sol:36"
          },
          {
            "contract": "StakingPoolV2",
            "label": "poolInfo",
            "type": "t_array(t_struct(StakingPoolInfo)15818_storage)dyn_storage",
            "src": "..\\project:\\contracts\\StakingPoolV2.sol:39"
          },
          {
            "contract": "StakingPoolV2",
            "label": "userStakingData",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(StakingData)15855_storage))",
            "src": "..\\project:\\contracts\\StakingPoolV2.sol:42"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_struct(StakingPoolInfo)15818_storage)dyn_storage": {
            "label": "struct StakingPoolV2.StakingPoolInfo[]"
          },
          "t_struct(StakingPoolInfo)15818_storage": {
            "label": "struct StakingPoolV2.StakingPoolInfo",
            "members": [
              {
                "label": "acceptedToken",
                "type": "t_contract(IERC20Upgradeable)987"
              },
              {
                "label": "cap",
                "type": "t_uint256"
              },
              {
                "label": "totalStaked",
                "type": "t_uint256"
              },
              {
                "label": "APR",
                "type": "t_uint256"
              },
              {
                "label": "lockDuration",
                "type": "t_uint256"
              },
              {
                "label": "delayDuration",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)987": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(StakingData)15855_storage))": {
            "label": "mapping(uint256 => mapping(address => struct StakingPoolV2.StakingData))"
          },
          "t_mapping(t_address,t_struct(StakingData)15855_storage)": {
            "label": "mapping(address => struct StakingPoolV2.StakingData)"
          },
          "t_struct(StakingData)15855_storage": {
            "label": "struct StakingPoolV2.StakingData",
            "members": [
              {
                "label": "balance",
                "type": "t_uint256"
              },
              {
                "label": "stakingDataRecordCount",
                "type": "t_uint256"
              },
              {
                "label": "stakingDatas",
                "type": "t_mapping(t_uint256,t_struct(UserStakingData)15829_storage)"
              },
              {
                "label": "totalWithdrawals",
                "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(UserPendingWithdrawl)15834_storage))"
              },
              {
                "label": "totalWithdrawalsCount",
                "type": "t_mapping(t_uint256,t_uint256)"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(UserStakingData)15829_storage)": {
            "label": "mapping(uint256 => struct StakingPoolV2.UserStakingData)"
          },
          "t_struct(UserStakingData)15829_storage": {
            "label": "struct StakingPoolV2.UserStakingData",
            "members": [
              {
                "label": "balance",
                "type": "t_uint256"
              },
              {
                "label": "stakeTime",
                "type": "t_uint256"
              },
              {
                "label": "lastClaimTime",
                "type": "t_uint256"
              },
              {
                "label": "pendingReward",
                "type": "t_uint256"
              },
              {
                "label": "APR",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(UserPendingWithdrawl)15834_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct StakingPoolV2.UserPendingWithdrawl))"
          },
          "t_mapping(t_uint256,t_struct(UserPendingWithdrawl)15834_storage)": {
            "label": "mapping(uint256 => struct StakingPoolV2.UserPendingWithdrawl)"
          },
          "t_struct(UserPendingWithdrawl)15834_storage": {
            "label": "struct StakingPoolV2.UserPendingWithdrawl",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "applicableAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "bf769e9afa4459833c5923c4488fda00c7c96aa2efa59ad1bdca9a5adb2b6a78": {
      "address": "0x4fe7A4B55a9A1bfF20f33422b8851E4D524F9246",
      "txHash": "0x4956b103808188630a9e7e7b0f85f601b470a04c171a8d7025910b003634f921",
      "layout": {
        "solcVersion": "0.8.16",
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:116"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "StakingPool",
            "label": "_value",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\StakingPool.sol:30"
          },
          {
            "contract": "StakingPool",
            "label": "rewardDistributor",
            "type": "t_address",
            "src": "..\\project:\\contracts\\StakingPool.sol:33"
          },
          {
            "contract": "StakingPool",
            "label": "coldWalletAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\StakingPool.sol:36"
          },
          {
            "contract": "StakingPool",
            "label": "poolInfo",
            "type": "t_array(t_struct(StakingPoolInfo)14904_storage)dyn_storage",
            "src": "..\\project:\\contracts\\StakingPool.sol:39"
          },
          {
            "contract": "StakingPool",
            "label": "userStakingData",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(StakingData)14941_storage))",
            "src": "..\\project:\\contracts\\StakingPool.sol:42"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_struct(StakingPoolInfo)14904_storage)dyn_storage": {
            "label": "struct StakingPool.StakingPoolInfo[]"
          },
          "t_struct(StakingPoolInfo)14904_storage": {
            "label": "struct StakingPool.StakingPoolInfo",
            "members": [
              {
                "label": "acceptedToken",
                "type": "t_contract(IERC20Upgradeable)987"
              },
              {
                "label": "cap",
                "type": "t_uint256"
              },
              {
                "label": "totalStaked",
                "type": "t_uint256"
              },
              {
                "label": "APR",
                "type": "t_uint256"
              },
              {
                "label": "lockDuration",
                "type": "t_uint256"
              },
              {
                "label": "delayDuration",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)987": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(StakingData)14941_storage))": {
            "label": "mapping(uint256 => mapping(address => struct StakingPool.StakingData))"
          },
          "t_mapping(t_address,t_struct(StakingData)14941_storage)": {
            "label": "mapping(address => struct StakingPool.StakingData)"
          },
          "t_struct(StakingData)14941_storage": {
            "label": "struct StakingPool.StakingData",
            "members": [
              {
                "label": "balance",
                "type": "t_uint256"
              },
              {
                "label": "stakingDataRecordCount",
                "type": "t_uint256"
              },
              {
                "label": "stakingDatas",
                "type": "t_mapping(t_uint256,t_struct(UserStakingData)14915_storage)"
              },
              {
                "label": "totalWithdrawals",
                "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(UserPendingWithdrawl)14920_storage))"
              },
              {
                "label": "totalWithdrawalsCount",
                "type": "t_mapping(t_uint256,t_uint256)"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(UserStakingData)14915_storage)": {
            "label": "mapping(uint256 => struct StakingPool.UserStakingData)"
          },
          "t_struct(UserStakingData)14915_storage": {
            "label": "struct StakingPool.UserStakingData",
            "members": [
              {
                "label": "balance",
                "type": "t_uint256"
              },
              {
                "label": "stakeTime",
                "type": "t_uint256"
              },
              {
                "label": "lastClaimTime",
                "type": "t_uint256"
              },
              {
                "label": "pendingReward",
                "type": "t_uint256"
              },
              {
                "label": "APR",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(UserPendingWithdrawl)14920_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct StakingPool.UserPendingWithdrawl))"
          },
          "t_mapping(t_uint256,t_struct(UserPendingWithdrawl)14920_storage)": {
            "label": "mapping(uint256 => struct StakingPool.UserPendingWithdrawl)"
          },
          "t_struct(UserPendingWithdrawl)14920_storage": {
            "label": "struct StakingPool.UserPendingWithdrawl",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "applicableAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    },
    "86ad064e1a8bbe54d0cddb47a13d53520b396bcdfe8461c0614cb114bbb9bb70": {
      "address": "0xaC21cBca1C84c9950E34B33c7acEDEa1C61F3ae9",
      "txHash": "0x36971168b2876771eebbdf1bc400f69b97c2dc08f59771470de07b0b314566a3",
      "layout": {
        "solcVersion": "0.8.16",
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_uint8",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\security\\PausableUpgradeable.sol:116"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:41"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "..\\@openzeppelin\\contracts-upgradeable\\access\\AccessControlUpgradeable.sol:259"
          },
          {
            "contract": "StakingPoolV2",
            "label": "_value",
            "type": "t_uint256",
            "src": "..\\project:\\contracts\\StakingPoolV2.sol:30"
          },
          {
            "contract": "StakingPoolV2",
            "label": "rewardDistributor",
            "type": "t_address",
            "src": "..\\project:\\contracts\\StakingPoolV2.sol:33"
          },
          {
            "contract": "StakingPoolV2",
            "label": "coldWalletAddress",
            "type": "t_address",
            "src": "..\\project:\\contracts\\StakingPoolV2.sol:36"
          },
          {
            "contract": "StakingPoolV2",
            "label": "poolInfo",
            "type": "t_array(t_struct(StakingPoolInfo)15818_storage)dyn_storage",
            "src": "..\\project:\\contracts\\StakingPoolV2.sol:39"
          },
          {
            "contract": "StakingPoolV2",
            "label": "userStakingData",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(StakingData)15855_storage))",
            "src": "..\\project:\\contracts\\StakingPoolV2.sol:42"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_struct(StakingPoolInfo)15818_storage)dyn_storage": {
            "label": "struct StakingPoolV2.StakingPoolInfo[]"
          },
          "t_struct(StakingPoolInfo)15818_storage": {
            "label": "struct StakingPoolV2.StakingPoolInfo",
            "members": [
              {
                "label": "acceptedToken",
                "type": "t_contract(IERC20Upgradeable)987"
              },
              {
                "label": "cap",
                "type": "t_uint256"
              },
              {
                "label": "totalStaked",
                "type": "t_uint256"
              },
              {
                "label": "APR",
                "type": "t_uint256"
              },
              {
                "label": "lockDuration",
                "type": "t_uint256"
              },
              {
                "label": "delayDuration",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)987": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(StakingData)15855_storage))": {
            "label": "mapping(uint256 => mapping(address => struct StakingPoolV2.StakingData))"
          },
          "t_mapping(t_address,t_struct(StakingData)15855_storage)": {
            "label": "mapping(address => struct StakingPoolV2.StakingData)"
          },
          "t_struct(StakingData)15855_storage": {
            "label": "struct StakingPoolV2.StakingData",
            "members": [
              {
                "label": "balance",
                "type": "t_uint256"
              },
              {
                "label": "stakingDataRecordCount",
                "type": "t_uint256"
              },
              {
                "label": "stakingDatas",
                "type": "t_mapping(t_uint256,t_struct(UserStakingData)15829_storage)"
              },
              {
                "label": "totalWithdrawals",
                "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(UserPendingWithdrawl)15834_storage))"
              },
              {
                "label": "totalWithdrawalsCount",
                "type": "t_mapping(t_uint256,t_uint256)"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(UserStakingData)15829_storage)": {
            "label": "mapping(uint256 => struct StakingPoolV2.UserStakingData)"
          },
          "t_struct(UserStakingData)15829_storage": {
            "label": "struct StakingPoolV2.UserStakingData",
            "members": [
              {
                "label": "balance",
                "type": "t_uint256"
              },
              {
                "label": "stakeTime",
                "type": "t_uint256"
              },
              {
                "label": "lastClaimTime",
                "type": "t_uint256"
              },
              {
                "label": "pendingReward",
                "type": "t_uint256"
              },
              {
                "label": "APR",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(UserPendingWithdrawl)15834_storage))": {
            "label": "mapping(uint256 => mapping(uint256 => struct StakingPoolV2.UserPendingWithdrawl))"
          },
          "t_mapping(t_uint256,t_struct(UserPendingWithdrawl)15834_storage)": {
            "label": "mapping(uint256 => struct StakingPoolV2.UserPendingWithdrawl)"
          },
          "t_struct(UserPendingWithdrawl)15834_storage": {
            "label": "struct StakingPoolV2.UserPendingWithdrawl",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "applicableAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint8": {
            "label": "uint8"
          }
        }
      }
    }
  }
}
